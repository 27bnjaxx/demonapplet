# Nombre del workflow que verás en la pestaña Actions
name: Compilar Applet para Múltiples AIDs

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-convert:
    runs-on: ubuntu-latest
    
    # Solicitar permisos para que GITHUB_TOKEN funcione en nuestro propio repositorio.
    permissions:
      contents: read

    steps:
      # Paso 1: Clonar tu repositorio principal.
      - name: Clonar el repositorio principal
        uses: actions/checkout@v4

      # Paso 2: Instalar el Kit de Desarrollo de Java (JDK)
      - name: Instalar Java JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Paso 3: Descargar y verificar el SDK (con la URL corregida)
      - name: Descargar, verificar y extraer Java Card SDK
        run: |
          set -e # Detener el script inmediatamente si un comando falla
          
          # --- CORRECCIÓN FINAL: Se usa la rama 'dev' que es la correcta ---
          URL="https://github.com/ph4r05/javacard-sdk-305/archive/refs/heads/dev.zip"
          ZIP_FILE="jcsdk.zip"
          DEST_DIR="jcsdk"

          echo "Descargando SDK desde $URL..."
          # Usamos --fail para que curl falle si el servidor devuelve un error (ej. 404)
          curl --fail -L -o "$ZIP_FILE" "$URL"

          echo "Verificando que el archivo descargado sea un ZIP válido..."
          # 'file' identifica el tipo de archivo. Si no contiene "Zip archive data", fallamos.
          if ! file "$ZIP_FILE" | grep -q "Zip archive data"; then
            echo "::error:: El archivo descargado no es un ZIP. La descarga probablemente falló."
            exit 1
          fi
          
          echo "Archivo ZIP verificado. Extrayendo..."
          mkdir "$DEST_DIR"
          unzip -q "$ZIP_FILE" -d "$DEST_DIR" --strip-components=1
          
          echo "Limpiando archivo ZIP..."
          rm "$ZIP_FILE"
          
          echo "✅ SDK de Java Card listo en la carpeta '$DEST_DIR'."

      # Paso 4: Compilar el código Java
      - name: Compilar el código Java
        run: |
          set -e
          JAVA_FILE="HybridDemonAppletV19.java"
          if [ ! -f "$JAVA_FILE" ]; then
            echo "::error::Archivo Java no encontrado: $JAVA_FILE"
            exit 1
          fi
          javac -g -cp ./jcsdk/api_export_files/api_classic.jar "$JAVA_FILE"
          echo "✅ Compilación exitosa."

      # Paso 5: Convertir a .cap para cada AID
      - name: Convertir a .cap para cada tipo de tarjeta
        run: |
          set -e
          CLASS_NAME="HybridDemonAppletV19"
          declare -A AIDS
          AIDS["Visa"]="A0000000031010"
          AIDS["VisaElectron"]="A0000000032010"
          AIDS["Mastercard"]="A0000000041010"
          AIDS["Maestro"]="A0000000043060"
          AIDS["AmericanExpress"]="A00000002501"
          AIDS["DiscoverDiners"]="A0000001523010"
          AIDS["UnionPay"]="A0000003330101"

          for CARD_NAME in "${!AIDS[@]}"; do
            RAW_AID=${AIDS[$CARD_NAME]}
            PACKAGE_AID=$(echo "$RAW_AID" | sed 's/../&:/g;s/:$//' | sed 's/^/0x/;s/:/:0x/g')
            APPLET_AID="${PACKAGE_AID}:0x01"
            echo "--- Procesando $CARD_NAME ---"
            java -jar ./jcsdk/bin/converter.jar \
              -classdir . \
              -applet "$APPLET_AID" "$CLASS_NAME" \
              -exportpath ./jcsdk/api_export_files \
              -o "${CLASS_NAME}-${CARD_NAME}.cap" \
              "$PACKAGE_AID" 1.0
          done
          echo "✅ Todos los archivos .cap se han generado correctamente."

      # Paso 6: Guardar los artefactos generados
      - name: Subir todos los artefactos .cap
        uses: actions/upload-artifact@v4
        with:
          name: Archivos-CAP-Multiples
          path: '*.cap'
